const express = require('express');
const cors = require('cors');
const fs = require('fs');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

const DB_FILE = './db.json';

function readDB() {
  return JSON.parse(fs.readFileSync(DB_FILE, 'utf-8'));
}
function writeDB(data) {
  fs.writeFileSync(DB_FILE, JSON.stringify(data, null, 2));
}

// Registrazione
app.post('/api/register', (req, res) => {
  const { email, password } = req.body;
  const db = readDB();
  if (db.users.some(u => u.email === email))
    return res.status(400).json({ success: false, error: 'Email già registrata' });
  const user = {
    id: Date.now().toString(),
    email,
    password,
    premium: false,
    nfcTags: [],
    medicalData: {
      bloodType: "",
      allergies: "",
      conditions: "",
      notes: "",
      emergencyContacts: []
    }
  };
  db.users.push(user);
  writeDB(db);
  res.json({ success: true, data: user });
});

// Login
app.post('/api/login', (req, res) => {
  const { email, password } = req.body;
  const db = readDB();
  const user = db.users.find(u => u.email === email && u.password === password);
  if (!user) return res.status(401).json({ success: false, error: 'Credenziali non valide' });
  res.json({ success: true, data: user });
});

// Upgrade a premium
app.post('/api/upgrade', (req, res) => {
  const { userId } = req.body;
  const db = readDB();
  const user = db.users.find(u => u.id === userId);
  if (!user) return res.status(404).json({ success: false, error: 'Utente non trovato' });
  user.premium = true;
  writeDB(db);
  res.json({ success: true, data: user });
});

// Claim casco/NFC
app.post('/api/claim', (req, res) => {
  const { nfcId, userId } = req.body;
  const db = readDB();
  const user = db.users.find(u => u.id === userId);
  const tag = db.tags.find(t => t.id === nfcId);

  if (!user) return res.status(404).json({ success: false, error: 'Utente non trovato' });
  if (!tag) return res.status(404).json({ success: false, error: 'Tag non trovato' });
  if (tag.userId) return res.status(400).json({ success: false, error: 'Tag già associato' });

  if (!user.premium && user.nfcTags.length >= 1)
    return res.status(403).json({ success: false, error: 'Limite massimo raggiunto. Passa a premium per aggiungere altri caschi.' });

  tag.userId = user.id;
  user.nfcTags.push(nfcId);
  writeDB(db);
  res.json({ success: true, data: { tag, user } });
});

// Visualizza caschi associati
app.get('/api/user/:userId/tags', (req, res) => {
  const db = readDB();
  const user = db.users.find(u => u.id === req.params.userId);
  if (!user) return res.status(404).json({ success: false, error: 'Utente non trovato' });
  res.json({ success: true, data: user.nfcTags });
});

// Info tag NFC
app.get('/api/tag/:nfcId', (req, res) => {
  const db = readDB();
  const tag = db.tags.find(t => t.id === req.params.nfcId);
  if (!tag) {
    return res.status(404).json({ success: false, error: 'Questo tag NFC non è valido o non è stato generato da noi.' });
  }
  res.json({ success: true, data: tag });
});

// Ottieni dati sanitari
app.get('/api/user/:userId/medical', (req, res) => {
  const db = readDB();
  const user = db.users.find(u => u.id === req.params.userId);
  if (!user) return res.status(404).json({ success: false, error: 'Utente non trovato' });
  res.json({ success: true, data: user.medicalData || {} });
});


// Aggiorna dati sanitari (inclusi contatti emergenza)
app.put('/api/user/:userId/medical', (req, res) => {
  const db = readDB();
  const user = db.users.find(u => u.id === req.params.userId);
  if (!user) return res.status(404).json({ success: false, error: 'Utente non trovato' });

  // Se il frontend passa anche "name" o "surname", aggiorna il profilo utente
  if (req.body.name !== undefined) user.name = req.body.name;
  if (req.body.surname !== undefined) user.surname = req.body.surname;

  // Aggiorna la scheda medica
  user.medicalData = {
    bloodType: req.body.bloodType || "",
    allergies: req.body.allergies || "",
    conditions: req.body.conditions || "",
    notes: req.body.notes || "",
    emergencyContacts: req.body.emergencyContacts || []
  };

  writeDB(db);
  res.json({ success: true, data: user.medicalData });
});


app.listen(PORT, () => {
  console.log(`S.O.S. Helmet backend attivo su http://localhost:${PORT}`);
});

// in backend/server.js
// Aggiungi questa rotta, per esempio dopo quella di login

// Ottieni i dati di un singolo utente (PROFILO PUBBLICO)
app.get('/api/user/:userId', (req, res) => {
  const db = readDB();
  const user = db.users.find(u => u.id === req.params.userId);
  
  if (!user) {
    return res.status(404).json({ success: false, error: 'Utente non trovato' });
  }

  // Per sicurezza, non restituiamo MAI la password
  const { password, ...userWithoutPassword } = user;
  res.json({ success: true, data: userWithoutPassword });
});


app.patch('/api/user/:userId/profile', (req, res) => {
  const { name, surname } = req.body;
  const db = readDB();
  const user = db.users.find(u => u.id === req.params.userId);

  if (!user) {
    return res.status(404).json({ success: false, error: 'Utente non trovato' });
  }

  // Aggiorna solo i campi forniti
  if (name !== undefined) user.name = name;
  if (surname !== undefined) user.surname = surname;
  
  writeDB(db);

  // Restituisci l'utente aggiornato (senza password)
  const { password, ...updatedUser } = user;
  res.json({ success: true, data: updatedUser });
});